name: carpark finder api CI/CD

on:
  push:
    branches: 
      - master
      - yd
    paths:
      - 'app/**'
      - '.github/workflows/**'
      - 'tests/**'
      - 'openapi/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - '.dockerignore'
  pull_request:
    branches:
      - master

jobs:
  api-unit-test:
    runs-on: ubuntu-latest
    environment: carpark_finder
    # run the test on different python versions
    strategy:
      matrix:
        python-version:
          - "3.10"
    env:
      NSW_CARPARK_API_TOKEN: ${{ secrets.NSW_CARPARK_API_TOKEN }}
      PUBLIC_API_TOKEN: ${{ secrets.PUBLIC_API_TOKEN }}

    steps:
      # pull the code from the repo
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # set up the python version
          python-version: ${{ matrix.python-version }}
          cache: pip

      # accelerate the pip install by caching the dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-cache-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety coverage flake8 black isort mypy
      
      # check the security of the code
      - name: Run security checks
        continue-on-error: true
        run: |
          bandit -r app/ -f json -o bandit-results.json
          safety scan

      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-results.json

      # check the code style
      - name: Run linting
        run: |
          flake8 app/ --max-line-length=120
          black . --check
          isort . --check-only

      # # check the type of the code
      # - name: Run type checking
      #   run: |
      #     mypy .

      # run the unit tests and coverage
      - name: Run all tests with coverage
        run: |
          coverage run -m pytest tests/
          coverage report
          coverage xml
          coverage html

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: full-coverage-report
          path: htmlcov/


  deploy-coverage-report:
    needs: api-unit-test  
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/yd'
    steps:
      - uses: actions/checkout@v3

      - name: Download coverage HTML report
        uses: actions/download-artifact@v4
        with:
          name: full-coverage-report
          path: htmlcov/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./htmlcov

  deploy-docker-image:
    needs: api-unit-test
    runs-on: ubuntu-latest
    environment: carpark_finder
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/yd'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          # get the registry from the login-ecr step
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "âœ… Docker image pushed successfully"

      # - name: Deploy to AWS ECS
      #   uses: aws-actions/deploy-ecs-task-definition@v2
      #   with:
      #     task-definition: ${{ vars.ECS_TASK_DEFINITION }}
      #     service: ${{ vars.ECS_SERVICE }}
      #     cluster: ${{ vars.ECS_CLUSTER }}
      #     region: ${{ vars.AWS_REGION }}
      #     wait-for-service-stability: true